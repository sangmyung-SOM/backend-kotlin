name: GITHUB ACTIONS CI/CD

on:
  push:
    branches: [ "develop" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      #this part needs changing how to make yml file to way using git's secret variable
      - uses: actions/checkout@v2
      - name: Resources Setting
        run: |
          touch ./src/main/resources/application-prod.yml
          echo "${{ secrets.APP_YML_PROD }}" > ./src/main/resources/application-prod.yml
          cat ./src/main/resources/application-prod.yml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      - name: Spring Boot Build
        run: ./gradlew clean build -x test

      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/deploy-test .

      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Docker Hub Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/deploy-test

      - name: Get Github IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Add GitHub IP to AWS
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32


      #this part needs change host using security
      - name: AWS EC2 Connection
        uses: appleboy/ssh-action@master
        with:
          host: ec2-3-37-84-188.ap-northeast-2.compute.amazonaws.com
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.somkey }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: |
            sudo docker stop deploy-test
            sudo docker rm deploy-test
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/deploy-test
            sudo docker run -it -d -p 8080:8080 --name deploy-test ${{ secrets.DOCKERHUB_USERNAME }}/deploy-test

      - name: Remove IP FROM security group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32



































#name: Deploy to Amazon ECR
#
#on:
#  push:
#    branches:
#      - develop
#
#jobs:
#  build:
#    name: Deploy
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Setup to JDK17
#        uses: actions/setup-java@v2
#        with:
#          distribution: 'adopt'
#          java-version: '17'
#
#      - name: permission gradlew
#        run: chmod +x ./gradlew
#
#      - name: Build gradlew
#        run: ./gradlew bootJar
##        run: ./gradlew build
#
##      - name: docker build and push
##        run: |
##          docker login -u ${{ secrets.BSH_DOCKER_USERNAME }} -p ${{ secrets.BSH_DOCKER_PASSWORD }}
##          docker build -t ${{ secrets.BSH_DOCKER_REPO }} .
##          docker push ${{ secrets.DOCKER_REPO }}
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
##          IMAGE_TAG: ${{ github.sha }}
#        run: |
#          # Build a docker container and
#          # push it to ECR not ECS so need to change
#          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/f9s3i1t6
#          docker build -t som2 .
#          docker tag som2:latest public.ecr.aws/f9s3i1t6/${{ secrets.ECR_REPOSITORY_NAME }}:latest
#          docker push public.ecr.aws/f9s3i1t6/${{ secrets.ECR_REPOSITORY_NAME }}:latest
#
#      - name: EC2 Docker Run2
#        uses: appleboy/ssh-action@master
#        with:
#          host: ec2-3-37-84-188.ap-northeast-2.compute.amazonaws.com
#          username: ec2-user
#          key: ${{ secrets.somkey }}
#          port: 22
#          script: |
#            docker stop CDtest && docker rm CDtest
#            docker rmi public.ecr.aws/f9s3i1t6/${{ secrets.ECR_REPOSITORY_NAME }}:latest
#            docker run -it -d --name CDtest -p 8080:8080 public.ecr.aws/f9s3i1t6/${{ secrets.ECR_REPOSITORY_NAME }}:latest
#
#      #      - name: connect EC2
##        run: |
##          echo "${{ secrets.somkey }}" >> key.pem
##          chmod 400 key.pem
##          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.AWS_EC2_URL }}
##            docker run -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }} -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_KEY }} -e AWS_DEFAULT_REGION=ap-northeast-2 -d --name CDtest -p 8080:8080 public.ecr.aws/f9s3i1t6/${{ secrets.ECR_REPOSITORY_NAME }}:latest
#
#      - name: Check running containers
#        run: |
#          ls -a
#      - name: Check running contai  ners
#        run: docker ps
#
#
#
##  deploy:
##    needs: build
##    name: CD
##
##    runs-on: ubuntu-latest
##
##    steps:
##      - name: Configure AWS credentials
##        uses: aws-actions/configure-aws-credentials@v1
##        with:
##          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
##          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
##          aws-region: ap-northeast-2
##
##      - name: Login to Amazon ECR
##        id: login-ecr
##        uses: aws-actions/amazon-ecr-login@v1
##
##      - name: Pull image from Amazon ECR and restart container
##        run: |
##          docker pull public.ecr.aws/f9s3i1t6/${{ secrets.ECR_REPOSITORY_NAME }}:latest
##          docker stop test && docker rm test
##          docker run -d --name test -p 8080:8080 --restart unless-stopped public.ecr.aws/f9s3i1t6/${{ secrets.ECR_REPOSITORY_NAME }}:latest
##
